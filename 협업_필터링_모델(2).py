# -*- coding: utf-8 -*-
"""협업 필터링 모델(2) 제출

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZgVWgdKIIMxftmfUi7EawXB_HQJ779Fz
"""

# Commented out IPython magic to ensure Python compatibility.
## 코랩을 사용할 때
#드라이브 마운트
from google.colab import drive
drive.mount('/content/drive')

#현재 작업 위치 이동
#띄어쓰기에 \붙일 것
# %cd /content/drive/MyDrive/MultiCampus/데이터 시각화3

!pip install surprise

import pandas as pd
import pickle
from surprise import SVD
from surprise import Dataset
from surprise import Reader
from surprise.model_selection import cross_validate
from sklearn.decomposition import TruncatedSVD

def error_measure(algorithm,errors):

  reader=Reader(rating_scale=(0,10))
  data = Dataset.load_from_df(df_steam_meta_con[['appid','user','userscore']],
                            reader=reader)
  cross_validate(algorithm,data,measures=(errors),cv=2,verbose=1) # SVD rmse, mae평가

def make_pivot(index='appid',columns='user',values='userscore'):
  df_steam_meta_con = pd.read_pickle('steam_meta.pkl')# 피클로 저장된 파일 불러오기
  pdf_steam= pd.pivot_table(df_steam_meta_con,
                     index= index,
                     columns= columns,
                     values= values
  )
  return pdf_steam

from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

SVD2 = TruncatedSVD(n_components=20) 
matrix=SVD2.fit_transform(make_pivot().fillna(0))  # SVD를 사용해서 행렬 분해
def sim_rate(matrix1,matrix2):
  similarity_rate=cosine_similarity(matrix1,matrix2)# 코사인유사도 구하기
  np.fill_diagonal(similarity_rate,0)# 넣은 게임을 그대로 출력하지 않도록 대각행렬에 0입력
  return similarity_rate

def similarity_rate2():
  pdf_steam2=make_pivot().reset_index()
  game_title=pdf_steam2['appid']
  return pd.DataFrame(data=sim_rate(matrix,matrix),index=game_title,columns=game_title) # 코사인유사도 구한 매트릭스를 데이터프레임화

similarity_rate2().to_pickle('gamedata.pkl')# 피클로 저장하기