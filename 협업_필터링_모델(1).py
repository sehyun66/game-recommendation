# -*- coding: utf-8 -*-
"""협업 필터링 모델 (1)의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gDHAMO4y4nAn_zGyW0HypMRbJejSdXt0
"""

# Commented out IPython magic to ensure Python compatibility.
## 코랩을 사용할 때
#드라이브 마운트
from google.colab import drive
drive.mount('/content/drive')

#현재 작업 위치 이동
#띄어쓰기에 \붙일 것
# %cd /content/drive/MyDrive/MultiCampus/데이터 시각화3

import pandas as pd
import pickle

def load_steam_data():
  '''
  스팀 데이터 불러와서 전처리하기
  '''  
  df_steam = pd.read_csv('./data/final_seh2.csv')
  df_steam=df_steam.drop(columns=['Unnamed: 0','Unnamed: 0.1'])
  df_steam=df_steam.dropna(axis=0)
  df_steam=df_steam.reset_index()
  df_steam=df_steam.drop(columns='index')
  df_steam = df_steam.rename(columns={"steamid": "user"})
  df_steam['appid']=df_steam['appid'].astype(int)
  df_steam['title'] = df_steam['title'].str.replace("[^A-Za-z0-9]+","")
  df_steam['title'] = df_steam['title'].str.upper()
  return df_steam

def load_meta_data():
  '''
  메타크리틱 데이터 전처리하기
  '''  
  df_meta = pd.read_csv('./data/joined_meta_df.csv')
  df_meta=df_meta.drop(columns='Unnamed: 0')
  df_meta=df_meta.dropna(axis=0)
  df_meta['title'] = df_meta['title'].str.replace("[^A-Za-z0-9]+","")
  df_meta['title'] = df_meta['title'].str.upper()
  df_meta= df_meta[df_meta['title'] != '']
  df_meta = df_meta.rename(columns={ "username": "user"})
  return df_meta

def meta_size_reduction():
  '''
  유저평가 개수가 적은 게임 삭제
  '''  
  review_per_meta = pd.DataFrame(load_meta_data()['user'].value_counts())
  review_per_meta = review_per_meta.reset_index().rename(columns={'index':'user', 'user':'counts'})
  review_per_meta2=review_per_meta[review_per_meta['counts']>=5] # 유저평가 수가 5개 이상인 데이터만 남김
  return review_per_meta2

def merge_data(data1,data2):
  '''
  데이터 merge하기
  '''  
  df_merge=pd.merge(data1,data2,on='user',how='right').drop(columns='counts', axis=1)
  return df_merge

def steam_size_reduction():
  '''
  유저평가 개수가 적은 게임 삭제
  '''  
  review_per_user = pd.DataFrame(load_steam_data()['user'].value_counts())
  review_per_user = review_per_user.reset_index().rename(columns={'index':'user', 'user':'counts'})
  review_per_user2=review_per_user[review_per_user['counts']>=20]
  return review_per_user2

def concat_data(data1,data2):
  '''
  데이터 concat하기
  '''  
  df_concat=pd.concat([data1,data2],join='inner')
  return df_concat

df_concat2=concat_data(merge_data(load_steam_data(), steam_size_reduction()),merge_data(load_meta_data(),meta_size_reduction()))

df_concat2.to_pickle('steam_meta.pkl') # 데이터가 커서 피클로 저장

